::: Simple FAT Filesystem Implementation

This was a filesystem implementation project. The goal of this project is to implement a simple file system on top of a virtual disk. To this end, I implemented a library that offers a set of basic file system calls (such as open, read, write, ...) to applications. The file data and file system meta-information will be stored on a virtual disk. This virtual disk is actually a single file that is stored on the "real" file system provided by the Linux operating system. That is, I am basically implementing my file system on top of the Linux file system. As such, this implementation is purely a practice, and cannot be used in real situations.

The following methods are implemented:

	- int make_fs(char *disk_name);

	This function creates a fresh (and empty) file system on the virtual disk with name disk_name. 
	
	- int mount_fs(char *disk_name);

	This function mounts a file system  that is stored on a virtual disk with name  disk_name. With the mount operation, a file system becomes "ready for use." The function returns 0 on success, and -1 when the disk disk_name could not be opened or when the disk does not contain a valid file system (that you previously created with  make_fs ).

	- int umount_fs(char *disk_name);

	This function unmounts my file system from a virtual disk with name disk_name. The function returns 0 on success, and -1 when the disk disk_name could not be closed or when data could not be written to the disk (this should not happen).

	- int fs_open(char *name);

	The file specified by name is opened for reading and writing, and the file descriptor corresponding to this file is returned to the calling function. If successful, fs_open returns a non-negative integer, which is a file descriptor that can be used to subsequently access this file. Note that the same file (file with the same name) can be opened multiple times. fs_open returns -1 on failure. It is a failure when the file with  name cannot be found (i.e., it has not been created previously or is already deleted). It is also a failure when there are already 32 file descriptors active. When a file is opened, the file offset (seek pointer) is set to 0 (the beginning of the file).

	- int fs_close(int fildes);

	The file descriptor fildes is closed. A closed file descriptor can no longer be used to access the corresponding file. Upon successful completion, a value of 0 is returned. In case the file descriptor fildes does not exist or is not open, the function returns -1.

	- int fs_create(char *name);

	This function creates a new file with name name in the root directory of my file system. The file is initially empty. The maximum length for a file name is 15 characters. Upon successful completion, a value of 0 is returned. fs_create returns -1 on failure. It is a failure when the file with name already exists or when the file name is too long (it exceeds 15 characters).

	- int fs_delete(char *name);

	This function deletes the file with name name from the root directory of my file system and frees all data blocks and meta-information that correspond to that file. The file that is being deleted must not be open. That is, there cannot be any open file descriptor that refers to the file name. When the file is open at the time that fs_delete is called, the call fails and the file is not deleted. Upon successful completion, a value of 0 is returned.  fs_delete returns -1 on failure. It is a failure when the file with name does not exist. It is also a failure when the file is currently open (i.e., there exists at least one open file descriptor that is associated with this file).

	- int fs_read(int fildes, void *buf, size_t nbyte);

	This function attempts to read nbyte bytes of data from the file referenced by the descriptor fildes into the buffer pointed to by  buf. The function assumes that the buffer  buf is large enough to hold at least  nbyte bytes. When the function attempts to read past the end of the file, it reads all bytes until the end of the file. Upon successful completion, the number of bytes that were actually read is returned. This number could be smaller than  nbyte when attempting to read past the end of the file (when trying to read while the file pointer is at the end of the file, the function returns zero). In case of failure, the function returns -1. It is a failure when the file descriptor fildes is not valid. The read function implicitly increments the file pointer by the number of bytes that were actually read.

	- int fs_write(int fildes, void *buf, size_t nbyte);

	This function attempts to write nbyte bytes of data to the file referenced by the descriptor fildes from the buffer pointed to by buf. The function assumes that the buffer buf holds at least nbyte bytes. When the function attempts to write past the end of the file, the file is automatically extended to hold the additional bytes. It is possible that the disk runs out of space while performing a write operation. In this case, the function attempts to write as many bytes as possible (i.e., to fill up the entire space that is left). The maximum file size is 16M (which is, 4,096 blocks, each 4K). Upon successful completion, the number of bytes that were actually written is returned. This number could be smaller than  nbyte when the disk runs out of space (when writing to a full disk, the function returns zero). In case of failure, the function returns -1. It is a failure when the file descriptor  fildes is not valid. The  write function implicitly increments the file pointer by the number of bytes that were actually written.

	- int fs_get_filesize(int fildes);

	This function returns the current size of the file pointed to by the file descriptor fildes. In case fildes is invalid, the function returns -1.

	- int fs_listfiles(char ***files);

	This function creates and populates an array of all filenames currently known to the file system. My implementation adds a NULL pointer after the last element in the array. On success the function returns 0, in the case of an error the function returns -1.

	- int fs_lseek(int fildes, off_t offset);

	This function sets the file pointer (the offset used for read and write operations) associated with the file descriptor  fildes to the argument offset. It is an error to set the file pointer beyond the end of the file. To append to a file, one can set the file pointer to the end of a file, for example, by calling  fs_lseek(fd, fs_get_filesize(fd) );. Upon successful completion, a value of 0 is returned.  fs_lseek returns -1 on failure. It is a failure when the file descriptor  fildes is invalid, when the requested  offset is larger than the file size, or when o  ffset is less than zero.

	- int fs_truncate(int fildes, off_t length);

	This function causes the file referenced by  fildes to be truncated to  length bytes in size. If the file was previously larger than this new size, the extra data is lost and the corresponding data blocks on disk (if any) must be freed. It is not possible to extend a file using  fs_truncate . When the file pointer is larger than the new  length, then it is also set to  length (the end of the file). Upon successful completion, a value of 0 is returned.  fs_lseek returns -1 on failure. It is a failure when the file descriptor  fildes is invalid or the requested  length is larger than the file size.

